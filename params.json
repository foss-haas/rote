{"name":"rote","tagline":"Simple isomorphic routing library","body":"# Synopsis\r\n\r\n**rote** is a simple routing library for the browser and the server.\r\n\r\n[![license - MIT](https://img.shields.io/npm/l/rote.svg)](http://foss-haas.mit-license.org) [![Dependencies](https://img.shields.io/david/foss-haas/rote.svg)](https://david-dm.org/foss-haas/rote)\r\n\r\n[![NPM status](https://nodei.co/npm/rote.png?compact=true)](https://www.npmjs.com/package/rote)\r\n\r\n[![Build status](https://img.shields.io/travis/foss-haas/rote.svg)](https://travis-ci.org/foss-haas/rote) [![Coverage status](https://img.shields.io/coveralls/foss-haas/rote.svg)](https://coveralls.io/r/foss-haas/rote?branch=master) [![Codacy rating](https://img.shields.io/codacy/235d77e8bfe041c8b1bb63e1c1b50d65.svg)](https://www.codacy.com/public/me_4/rote)\r\n\r\n# Install\r\n\r\n## With NPM\r\n\r\n```sh\r\nnpm install rote\r\n```\r\n\r\n## From source\r\n\r\n```sh\r\ngit clone https://github.com/foss-haas/rote.git\r\ncd rote\r\nnpm install\r\nnpm run dist\r\n```\r\n\r\n## With component\r\n\r\n```sh\r\ncomponent install foss-haas/rote\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n## With bower\r\n\r\n```sh\r\nbower install rote\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n## With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/foss-haas/rote/master/dist/rote.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n## With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/foss-haas/rote/master/dist/rote.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n## As a standalone browser bundle\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/foss-haas/rote/master/dist/rote.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/rote.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `rote` module available in the global namespace.\r\n\r\n# Usage example\r\n\r\n```js\r\nvar router = require('rote')();\r\n\r\nrouter.add('/:foo/:bar', views.fooBar, 'foo.bar');\r\nvar path = router.reverse('foo.bar', {foo: 'lorem', bar: 'ipsum'});\r\n// => \"/lorem/ipsum\"\r\nrouter.add('/:foo/:qux', views.fooQux);\r\nvar route = router.resolve('/hello/world'); // or: router('/hello/world');\r\n/* => {\r\n    \"fn\": views.fooBar,\r\n    \"name\": \"foo.bar\",\r\n    \"params\": {\r\n        \"foo\": \"hello\",\r\n        \"bar\": \"world\"\r\n    },\r\n    splat: null,\r\n    next: function () {...}\r\n} */\r\nroute = route.next();\r\n/* => {\r\n    \"fn\": views.fooQux,\r\n    \"name\": null,\r\n    \"params\": {\r\n        \"foo\": \"hello\",\r\n        \"qux\": \"world\"\r\n    },\r\n    splat: null,\r\n    next: function () {...}\r\n} */\r\nroute = route.next();\r\n// => null\r\n```\r\n\r\n# API\r\n\r\n## rote([trailingSlashes:Boolean]):Router\r\n\r\nCreates a new router.\r\n\r\nIf `trailingSlashes` is set to `true`, the router will respect trailing slashes when resolving or reversing routes. Otherwise they will be stripped.\r\n\r\n## router.add(path, fn[, name]):self\r\n\r\nAdds a route for the given path to the router's routing map.\r\n\r\nIf `name` is not empty, the route can also be reversed. If a route with the given `name` has already been added to the router, an error will be thrown instead.\r\n\r\nThe `path` is expected to consist of zero or more parts delimited by slashes.\r\n\r\nRedundant slashes will be ignored (e.g. `/foo//bar` becomes `/foo/bar`). If the router does not respect trailing slashes, any trailing slashes will also be ignored (e.g. `/foo/` becomes `/foo`).\r\n\r\nParts starting with a colon (e.g. `/:foo`) will be treated as parameter names and match any non-empty string that does not contain a slash.\r\n\r\nParts consisting of a single asterisk (i.e. `/*`) will be treated as wildcards and match any non-empty string, including slashes. Wildcards must always occur at the end of the path and can not be followed by another part or trailing slash. Wildcards do not match the empty string.\r\n\r\nAny other part will be interpreted literally.\r\n\r\nThis method is chainable (i.e. it returns the router it was called on).\r\n\r\n## router.reverse(name[, params[, splat]]):String\r\n\r\nReverses the route with the given `name` using the given `params` and `splat`.\r\n\r\nThis method returns the path that would match the given route with the given parameters and wildcard.\r\n\r\nIf no route with the given `name` exists, `null` will be returned instead.\r\n\r\nIf the route takes parameters and `params` is not set or missing any of the expected parameters, an error will be thrown.\r\n\r\nIf the route takes a wildcard and `splat` is not set or empty, an error will be thrown.\r\n\r\n## router.resolve(path):route\r\n\r\nResolves the given `path` to a known route.\r\n\r\nIf the path does not match any known route, `null` will be returned instead.\r\n\r\nOtherwise an object with the following properties will be returned:\r\n\r\n* `fn`: the matching function registered for this route.\r\n* `name`: the `name` the route was registered with.\r\n* `params`: an object mapping any parameters to their values.\r\n* `splat`: the value of the route's wildcard or `null`.\r\n* `next`: a function that will return the next matching route for the path or `null`.\r\n\r\n# License\r\n\r\nThe MIT/Expat license. For more information, see http://foss-haas.mit-license.org/ or the accompanying [LICENSE](https://github.com/foss-haas/rote/blob/master/LICENSE) file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}